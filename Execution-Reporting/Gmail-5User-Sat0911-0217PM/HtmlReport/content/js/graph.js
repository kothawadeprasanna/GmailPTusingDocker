/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 164.0, "minX": 0.0, "maxY": 2587.0, "series": [{"data": [[0.0, 305.0], [0.1, 305.0], [0.2, 305.0], [0.3, 306.0], [0.4, 306.0], [0.5, 306.0], [0.6, 306.0], [0.7, 307.0], [0.8, 307.0], [0.9, 307.0], [1.0, 307.0], [1.1, 308.0], [1.2, 308.0], [1.3, 308.0], [1.4, 308.0], [1.5, 309.0], [1.6, 309.0], [1.7, 309.0], [1.8, 309.0], [1.9, 309.0], [2.0, 310.0], [2.1, 310.0], [2.2, 310.0], [2.3, 310.0], [2.4, 310.0], [2.5, 310.0], [2.6, 310.0], [2.7, 310.0], [2.8, 311.0], [2.9, 311.0], [3.0, 311.0], [3.1, 311.0], [3.2, 311.0], [3.3, 311.0], [3.4, 311.0], [3.5, 311.0], [3.6, 311.0], [3.7, 312.0], [3.8, 312.0], [3.9, 312.0], [4.0, 312.0], [4.1, 312.0], [4.2, 312.0], [4.3, 312.0], [4.4, 312.0], [4.5, 312.0], [4.6, 312.0], [4.7, 312.0], [4.8, 313.0], [4.9, 313.0], [5.0, 313.0], [5.1, 313.0], [5.2, 313.0], [5.3, 313.0], [5.4, 313.0], [5.5, 313.0], [5.6, 313.0], [5.7, 313.0], [5.8, 314.0], [5.9, 314.0], [6.0, 314.0], [6.1, 314.0], [6.2, 314.0], [6.3, 314.0], [6.4, 314.0], [6.5, 314.0], [6.6, 314.0], [6.7, 314.0], [6.8, 314.0], [6.9, 314.0], [7.0, 314.0], [7.1, 315.0], [7.2, 315.0], [7.3, 315.0], [7.4, 315.0], [7.5, 315.0], [7.6, 315.0], [7.7, 315.0], [7.8, 315.0], [7.9, 315.0], [8.0, 315.0], [8.1, 315.0], [8.2, 316.0], [8.3, 316.0], [8.4, 316.0], [8.5, 316.0], [8.6, 316.0], [8.7, 316.0], [8.8, 316.0], [8.9, 316.0], [9.0, 316.0], [9.1, 316.0], [9.2, 316.0], [9.3, 316.0], [9.4, 317.0], [9.5, 317.0], [9.6, 317.0], [9.7, 317.0], [9.8, 317.0], [9.9, 317.0], [10.0, 317.0], [10.1, 318.0], [10.2, 318.0], [10.3, 318.0], [10.4, 318.0], [10.5, 318.0], [10.6, 318.0], [10.7, 318.0], [10.8, 318.0], [10.9, 319.0], [11.0, 319.0], [11.1, 319.0], [11.2, 319.0], [11.3, 319.0], [11.4, 319.0], [11.5, 319.0], [11.6, 319.0], [11.7, 319.0], [11.8, 319.0], [11.9, 319.0], [12.0, 319.0], [12.1, 319.0], [12.2, 319.0], [12.3, 320.0], [12.4, 320.0], [12.5, 320.0], [12.6, 320.0], [12.7, 320.0], [12.8, 320.0], [12.9, 320.0], [13.0, 320.0], [13.1, 320.0], [13.2, 320.0], [13.3, 320.0], [13.4, 321.0], [13.5, 321.0], [13.6, 321.0], [13.7, 321.0], [13.8, 321.0], [13.9, 321.0], [14.0, 321.0], [14.1, 321.0], [14.2, 321.0], [14.3, 321.0], [14.4, 321.0], [14.5, 322.0], [14.6, 322.0], [14.7, 322.0], [14.8, 322.0], [14.9, 322.0], [15.0, 322.0], [15.1, 322.0], [15.2, 322.0], [15.3, 322.0], [15.4, 322.0], [15.5, 322.0], [15.6, 323.0], [15.7, 323.0], [15.8, 323.0], [15.9, 323.0], [16.0, 323.0], [16.1, 323.0], [16.2, 323.0], [16.3, 323.0], [16.4, 323.0], [16.5, 323.0], [16.6, 324.0], [16.7, 324.0], [16.8, 324.0], [16.9, 324.0], [17.0, 324.0], [17.1, 324.0], [17.2, 324.0], [17.3, 324.0], [17.4, 324.0], [17.5, 325.0], [17.6, 325.0], [17.7, 325.0], [17.8, 325.0], [17.9, 325.0], [18.0, 326.0], [18.1, 326.0], [18.2, 326.0], [18.3, 326.0], [18.4, 326.0], [18.5, 326.0], [18.6, 326.0], [18.7, 326.0], [18.8, 326.0], [18.9, 326.0], [19.0, 326.0], [19.1, 326.0], [19.2, 327.0], [19.3, 327.0], [19.4, 327.0], [19.5, 327.0], [19.6, 327.0], [19.7, 327.0], [19.8, 327.0], [19.9, 328.0], [20.0, 328.0], [20.1, 328.0], [20.2, 328.0], [20.3, 328.0], [20.4, 328.0], [20.5, 328.0], [20.6, 328.0], [20.7, 328.0], [20.8, 329.0], [20.9, 329.0], [21.0, 329.0], [21.1, 329.0], [21.2, 329.0], [21.3, 329.0], [21.4, 329.0], [21.5, 329.0], [21.6, 329.0], [21.7, 330.0], [21.8, 330.0], [21.9, 330.0], [22.0, 330.0], [22.1, 330.0], [22.2, 330.0], [22.3, 331.0], [22.4, 331.0], [22.5, 331.0], [22.6, 331.0], [22.7, 331.0], [22.8, 331.0], [22.9, 331.0], [23.0, 332.0], [23.1, 332.0], [23.2, 332.0], [23.3, 332.0], [23.4, 332.0], [23.5, 332.0], [23.6, 332.0], [23.7, 332.0], [23.8, 333.0], [23.9, 333.0], [24.0, 333.0], [24.1, 333.0], [24.2, 334.0], [24.3, 334.0], [24.4, 334.0], [24.5, 334.0], [24.6, 334.0], [24.7, 334.0], [24.8, 335.0], [24.9, 335.0], [25.0, 335.0], [25.1, 335.0], [25.2, 335.0], [25.3, 335.0], [25.4, 335.0], [25.5, 336.0], [25.6, 336.0], [25.7, 336.0], [25.8, 336.0], [25.9, 336.0], [26.0, 336.0], [26.1, 336.0], [26.2, 336.0], [26.3, 337.0], [26.4, 337.0], [26.5, 337.0], [26.6, 337.0], [26.7, 337.0], [26.8, 337.0], [26.9, 337.0], [27.0, 338.0], [27.1, 338.0], [27.2, 338.0], [27.3, 338.0], [27.4, 338.0], [27.5, 339.0], [27.6, 340.0], [27.7, 340.0], [27.8, 340.0], [27.9, 340.0], [28.0, 340.0], [28.1, 341.0], [28.2, 341.0], [28.3, 341.0], [28.4, 341.0], [28.5, 341.0], [28.6, 341.0], [28.7, 341.0], [28.8, 341.0], [28.9, 341.0], [29.0, 342.0], [29.1, 342.0], [29.2, 342.0], [29.3, 342.0], [29.4, 342.0], [29.5, 343.0], [29.6, 343.0], [29.7, 343.0], [29.8, 344.0], [29.9, 344.0], [30.0, 344.0], [30.1, 344.0], [30.2, 344.0], [30.3, 344.0], [30.4, 344.0], [30.5, 344.0], [30.6, 345.0], [30.7, 345.0], [30.8, 345.0], [30.9, 345.0], [31.0, 345.0], [31.1, 345.0], [31.2, 345.0], [31.3, 345.0], [31.4, 345.0], [31.5, 346.0], [31.6, 346.0], [31.7, 346.0], [31.8, 347.0], [31.9, 347.0], [32.0, 347.0], [32.1, 347.0], [32.2, 347.0], [32.3, 348.0], [32.4, 348.0], [32.5, 348.0], [32.6, 348.0], [32.7, 348.0], [32.8, 349.0], [32.9, 349.0], [33.0, 349.0], [33.1, 349.0], [33.2, 349.0], [33.3, 349.0], [33.4, 350.0], [33.5, 350.0], [33.6, 350.0], [33.7, 350.0], [33.8, 350.0], [33.9, 350.0], [34.0, 350.0], [34.1, 350.0], [34.2, 351.0], [34.3, 351.0], [34.4, 351.0], [34.5, 352.0], [34.6, 352.0], [34.7, 353.0], [34.8, 353.0], [34.9, 353.0], [35.0, 353.0], [35.1, 353.0], [35.2, 354.0], [35.3, 354.0], [35.4, 354.0], [35.5, 355.0], [35.6, 355.0], [35.7, 356.0], [35.8, 356.0], [35.9, 356.0], [36.0, 356.0], [36.1, 356.0], [36.2, 357.0], [36.3, 357.0], [36.4, 357.0], [36.5, 357.0], [36.6, 357.0], [36.7, 357.0], [36.8, 358.0], [36.9, 359.0], [37.0, 359.0], [37.1, 359.0], [37.2, 360.0], [37.3, 360.0], [37.4, 360.0], [37.5, 360.0], [37.6, 361.0], [37.7, 361.0], [37.8, 361.0], [37.9, 362.0], [38.0, 362.0], [38.1, 362.0], [38.2, 362.0], [38.3, 362.0], [38.4, 362.0], [38.5, 363.0], [38.6, 363.0], [38.7, 364.0], [38.8, 364.0], [38.9, 364.0], [39.0, 364.0], [39.1, 364.0], [39.2, 364.0], [39.3, 365.0], [39.4, 365.0], [39.5, 365.0], [39.6, 366.0], [39.7, 366.0], [39.8, 367.0], [39.9, 367.0], [40.0, 367.0], [40.1, 367.0], [40.2, 367.0], [40.3, 368.0], [40.4, 368.0], [40.5, 368.0], [40.6, 368.0], [40.7, 369.0], [40.8, 369.0], [40.9, 370.0], [41.0, 370.0], [41.1, 371.0], [41.2, 371.0], [41.3, 372.0], [41.4, 372.0], [41.5, 373.0], [41.6, 373.0], [41.7, 373.0], [41.8, 373.0], [41.9, 373.0], [42.0, 373.0], [42.1, 374.0], [42.2, 374.0], [42.3, 374.0], [42.4, 374.0], [42.5, 374.0], [42.6, 375.0], [42.7, 375.0], [42.8, 375.0], [42.9, 376.0], [43.0, 376.0], [43.1, 376.0], [43.2, 376.0], [43.3, 377.0], [43.4, 377.0], [43.5, 377.0], [43.6, 377.0], [43.7, 378.0], [43.8, 378.0], [43.9, 378.0], [44.0, 378.0], [44.1, 378.0], [44.2, 378.0], [44.3, 379.0], [44.4, 379.0], [44.5, 380.0], [44.6, 380.0], [44.7, 380.0], [44.8, 380.0], [44.9, 380.0], [45.0, 380.0], [45.1, 381.0], [45.2, 382.0], [45.3, 383.0], [45.4, 383.0], [45.5, 383.0], [45.6, 384.0], [45.7, 384.0], [45.8, 384.0], [45.9, 386.0], [46.0, 387.0], [46.1, 387.0], [46.2, 387.0], [46.3, 388.0], [46.4, 388.0], [46.5, 388.0], [46.6, 389.0], [46.7, 390.0], [46.8, 390.0], [46.9, 390.0], [47.0, 390.0], [47.1, 390.0], [47.2, 390.0], [47.3, 391.0], [47.4, 391.0], [47.5, 391.0], [47.6, 391.0], [47.7, 393.0], [47.8, 394.0], [47.9, 394.0], [48.0, 394.0], [48.1, 395.0], [48.2, 395.0], [48.3, 395.0], [48.4, 395.0], [48.5, 395.0], [48.6, 397.0], [48.7, 397.0], [48.8, 397.0], [48.9, 397.0], [49.0, 399.0], [49.1, 399.0], [49.2, 399.0], [49.3, 399.0], [49.4, 400.0], [49.5, 400.0], [49.6, 400.0], [49.7, 401.0], [49.8, 402.0], [49.9, 402.0], [50.0, 402.0], [50.1, 402.0], [50.2, 402.0], [50.3, 403.0], [50.4, 403.0], [50.5, 404.0], [50.6, 404.0], [50.7, 405.0], [50.8, 405.0], [50.9, 405.0], [51.0, 405.0], [51.1, 406.0], [51.2, 407.0], [51.3, 408.0], [51.4, 408.0], [51.5, 409.0], [51.6, 409.0], [51.7, 409.0], [51.8, 410.0], [51.9, 410.0], [52.0, 410.0], [52.1, 410.0], [52.2, 411.0], [52.3, 411.0], [52.4, 412.0], [52.5, 412.0], [52.6, 413.0], [52.7, 413.0], [52.8, 413.0], [52.9, 415.0], [53.0, 415.0], [53.1, 416.0], [53.2, 416.0], [53.3, 417.0], [53.4, 418.0], [53.5, 418.0], [53.6, 418.0], [53.7, 420.0], [53.8, 420.0], [53.9, 420.0], [54.0, 420.0], [54.1, 421.0], [54.2, 421.0], [54.3, 421.0], [54.4, 422.0], [54.5, 422.0], [54.6, 423.0], [54.7, 424.0], [54.8, 425.0], [54.9, 425.0], [55.0, 425.0], [55.1, 426.0], [55.2, 426.0], [55.3, 427.0], [55.4, 427.0], [55.5, 428.0], [55.6, 428.0], [55.7, 428.0], [55.8, 429.0], [55.9, 429.0], [56.0, 430.0], [56.1, 430.0], [56.2, 431.0], [56.3, 432.0], [56.4, 432.0], [56.5, 432.0], [56.6, 432.0], [56.7, 433.0], [56.8, 434.0], [56.9, 434.0], [57.0, 434.0], [57.1, 435.0], [57.2, 435.0], [57.3, 435.0], [57.4, 436.0], [57.5, 436.0], [57.6, 436.0], [57.7, 437.0], [57.8, 437.0], [57.9, 437.0], [58.0, 437.0], [58.1, 437.0], [58.2, 439.0], [58.3, 439.0], [58.4, 440.0], [58.5, 440.0], [58.6, 441.0], [58.7, 441.0], [58.8, 441.0], [58.9, 442.0], [59.0, 442.0], [59.1, 442.0], [59.2, 442.0], [59.3, 442.0], [59.4, 443.0], [59.5, 443.0], [59.6, 443.0], [59.7, 445.0], [59.8, 445.0], [59.9, 445.0], [60.0, 445.0], [60.1, 445.0], [60.2, 446.0], [60.3, 446.0], [60.4, 446.0], [60.5, 447.0], [60.6, 447.0], [60.7, 447.0], [60.8, 447.0], [60.9, 448.0], [61.0, 448.0], [61.1, 449.0], [61.2, 449.0], [61.3, 449.0], [61.4, 451.0], [61.5, 452.0], [61.6, 453.0], [61.7, 453.0], [61.8, 454.0], [61.9, 454.0], [62.0, 455.0], [62.1, 455.0], [62.2, 455.0], [62.3, 456.0], [62.4, 456.0], [62.5, 457.0], [62.6, 457.0], [62.7, 457.0], [62.8, 457.0], [62.9, 458.0], [63.0, 458.0], [63.1, 459.0], [63.2, 459.0], [63.3, 459.0], [63.4, 460.0], [63.5, 460.0], [63.6, 461.0], [63.7, 461.0], [63.8, 461.0], [63.9, 461.0], [64.0, 462.0], [64.1, 462.0], [64.2, 462.0], [64.3, 462.0], [64.4, 463.0], [64.5, 463.0], [64.6, 464.0], [64.7, 464.0], [64.8, 465.0], [64.9, 466.0], [65.0, 466.0], [65.1, 466.0], [65.2, 467.0], [65.3, 467.0], [65.4, 468.0], [65.5, 468.0], [65.6, 469.0], [65.7, 470.0], [65.8, 470.0], [65.9, 470.0], [66.0, 471.0], [66.1, 472.0], [66.2, 472.0], [66.3, 472.0], [66.4, 472.0], [66.5, 473.0], [66.6, 473.0], [66.7, 474.0], [66.8, 474.0], [66.9, 476.0], [67.0, 476.0], [67.1, 477.0], [67.2, 479.0], [67.3, 479.0], [67.4, 479.0], [67.5, 480.0], [67.6, 481.0], [67.7, 481.0], [67.8, 482.0], [67.9, 482.0], [68.0, 482.0], [68.1, 482.0], [68.2, 482.0], [68.3, 483.0], [68.4, 483.0], [68.5, 484.0], [68.6, 485.0], [68.7, 485.0], [68.8, 485.0], [68.9, 485.0], [69.0, 485.0], [69.1, 486.0], [69.2, 486.0], [69.3, 487.0], [69.4, 487.0], [69.5, 487.0], [69.6, 487.0], [69.7, 489.0], [69.8, 489.0], [69.9, 490.0], [70.0, 490.0], [70.1, 491.0], [70.2, 491.0], [70.3, 493.0], [70.4, 494.0], [70.5, 496.0], [70.6, 496.0], [70.7, 496.0], [70.8, 498.0], [70.9, 498.0], [71.0, 499.0], [71.1, 499.0], [71.2, 500.0], [71.3, 500.0], [71.4, 500.0], [71.5, 501.0], [71.6, 502.0], [71.7, 502.0], [71.8, 503.0], [71.9, 503.0], [72.0, 504.0], [72.1, 504.0], [72.2, 504.0], [72.3, 505.0], [72.4, 505.0], [72.5, 507.0], [72.6, 507.0], [72.7, 507.0], [72.8, 507.0], [72.9, 508.0], [73.0, 508.0], [73.1, 509.0], [73.2, 510.0], [73.3, 510.0], [73.4, 510.0], [73.5, 511.0], [73.6, 511.0], [73.7, 511.0], [73.8, 511.0], [73.9, 511.0], [74.0, 511.0], [74.1, 512.0], [74.2, 512.0], [74.3, 512.0], [74.4, 513.0], [74.5, 513.0], [74.6, 516.0], [74.7, 516.0], [74.8, 517.0], [74.9, 518.0], [75.0, 522.0], [75.1, 522.0], [75.2, 522.0], [75.3, 524.0], [75.4, 524.0], [75.5, 525.0], [75.6, 525.0], [75.7, 527.0], [75.8, 527.0], [75.9, 528.0], [76.0, 528.0], [76.1, 529.0], [76.2, 529.0], [76.3, 529.0], [76.4, 530.0], [76.5, 531.0], [76.6, 531.0], [76.7, 531.0], [76.8, 532.0], [76.9, 532.0], [77.0, 532.0], [77.1, 533.0], [77.2, 533.0], [77.3, 534.0], [77.4, 534.0], [77.5, 534.0], [77.6, 535.0], [77.7, 535.0], [77.8, 536.0], [77.9, 536.0], [78.0, 537.0], [78.1, 537.0], [78.2, 537.0], [78.3, 537.0], [78.4, 537.0], [78.5, 538.0], [78.6, 539.0], [78.7, 540.0], [78.8, 540.0], [78.9, 540.0], [79.0, 541.0], [79.1, 542.0], [79.2, 543.0], [79.3, 544.0], [79.4, 544.0], [79.5, 544.0], [79.6, 544.0], [79.7, 545.0], [79.8, 545.0], [79.9, 545.0], [80.0, 545.0], [80.1, 546.0], [80.2, 546.0], [80.3, 546.0], [80.4, 546.0], [80.5, 547.0], [80.6, 547.0], [80.7, 547.0], [80.8, 548.0], [80.9, 548.0], [81.0, 548.0], [81.1, 548.0], [81.2, 549.0], [81.3, 549.0], [81.4, 549.0], [81.5, 549.0], [81.6, 549.0], [81.7, 550.0], [81.8, 550.0], [81.9, 551.0], [82.0, 551.0], [82.1, 552.0], [82.2, 552.0], [82.3, 553.0], [82.4, 553.0], [82.5, 554.0], [82.6, 555.0], [82.7, 556.0], [82.8, 557.0], [82.9, 557.0], [83.0, 558.0], [83.1, 559.0], [83.2, 561.0], [83.3, 562.0], [83.4, 563.0], [83.5, 563.0], [83.6, 563.0], [83.7, 564.0], [83.8, 564.0], [83.9, 564.0], [84.0, 565.0], [84.1, 565.0], [84.2, 565.0], [84.3, 565.0], [84.4, 566.0], [84.5, 567.0], [84.6, 567.0], [84.7, 568.0], [84.8, 568.0], [84.9, 569.0], [85.0, 569.0], [85.1, 570.0], [85.2, 570.0], [85.3, 572.0], [85.4, 572.0], [85.5, 572.0], [85.6, 573.0], [85.7, 573.0], [85.8, 573.0], [85.9, 575.0], [86.0, 575.0], [86.1, 575.0], [86.2, 576.0], [86.3, 576.0], [86.4, 577.0], [86.5, 577.0], [86.6, 578.0], [86.7, 579.0], [86.8, 580.0], [86.9, 582.0], [87.0, 583.0], [87.1, 583.0], [87.2, 584.0], [87.3, 584.0], [87.4, 585.0], [87.5, 586.0], [87.6, 586.0], [87.7, 587.0], [87.8, 587.0], [87.9, 587.0], [88.0, 588.0], [88.1, 589.0], [88.2, 591.0], [88.3, 591.0], [88.4, 592.0], [88.5, 593.0], [88.6, 593.0], [88.7, 595.0], [88.8, 595.0], [88.9, 596.0], [89.0, 597.0], [89.1, 597.0], [89.2, 599.0], [89.3, 599.0], [89.4, 601.0], [89.5, 602.0], [89.6, 603.0], [89.7, 603.0], [89.8, 604.0], [89.9, 604.0], [90.0, 607.0], [90.1, 607.0], [90.2, 609.0], [90.3, 610.0], [90.4, 612.0], [90.5, 612.0], [90.6, 614.0], [90.7, 614.0], [90.8, 614.0], [90.9, 615.0], [91.0, 617.0], [91.1, 618.0], [91.2, 620.0], [91.3, 621.0], [91.4, 622.0], [91.5, 622.0], [91.6, 624.0], [91.7, 626.0], [91.8, 626.0], [91.9, 627.0], [92.0, 629.0], [92.1, 632.0], [92.2, 634.0], [92.3, 634.0], [92.4, 639.0], [92.5, 639.0], [92.6, 647.0], [92.7, 648.0], [92.8, 649.0], [92.9, 649.0], [93.0, 652.0], [93.1, 653.0], [93.2, 655.0], [93.3, 658.0], [93.4, 662.0], [93.5, 665.0], [93.6, 667.0], [93.7, 668.0], [93.8, 669.0], [93.9, 670.0], [94.0, 671.0], [94.1, 681.0], [94.2, 681.0], [94.3, 682.0], [94.4, 682.0], [94.5, 688.0], [94.6, 689.0], [94.7, 691.0], [94.8, 703.0], [94.9, 715.0], [95.0, 725.0], [95.1, 731.0], [95.2, 741.0], [95.3, 743.0], [95.4, 745.0], [95.5, 747.0], [95.6, 749.0], [95.7, 749.0], [95.8, 757.0], [95.9, 764.0], [96.0, 771.0], [96.1, 773.0], [96.2, 777.0], [96.3, 782.0], [96.4, 786.0], [96.5, 788.0], [96.6, 799.0], [96.7, 807.0], [96.8, 819.0], [96.9, 820.0], [97.0, 826.0], [97.1, 835.0], [97.2, 843.0], [97.3, 859.0], [97.4, 860.0], [97.5, 870.0], [97.6, 873.0], [97.7, 894.0], [97.8, 895.0], [97.9, 907.0], [98.0, 910.0], [98.1, 921.0], [98.2, 946.0], [98.3, 952.0], [98.4, 958.0], [98.5, 970.0], [98.6, 1000.0], [98.7, 1007.0], [98.8, 1049.0], [98.9, 1053.0], [99.0, 1146.0], [99.1, 1155.0], [99.2, 1203.0], [99.3, 1214.0], [99.4, 1271.0], [99.5, 1320.0], [99.6, 1450.0], [99.7, 1639.0], [99.8, 1973.0], [99.9, 2276.0], [100.0, 2587.0]], "isOverall": false, "label": "Negative: Get Drafts Gmail List", "isController": false}, {"data": [[0.0, 331.0], [0.1, 331.0], [0.2, 334.0], [0.3, 335.0], [0.4, 336.0], [0.5, 336.0], [0.6, 336.0], [0.7, 336.0], [0.8, 336.0], [0.9, 336.0], [1.0, 337.0], [1.1, 337.0], [1.2, 337.0], [1.3, 337.0], [1.4, 338.0], [1.5, 338.0], [1.6, 338.0], [1.7, 338.0], [1.8, 338.0], [1.9, 338.0], [2.0, 338.0], [2.1, 339.0], [2.2, 339.0], [2.3, 339.0], [2.4, 339.0], [2.5, 339.0], [2.6, 340.0], [2.7, 340.0], [2.8, 340.0], [2.9, 340.0], [3.0, 340.0], [3.1, 340.0], [3.2, 340.0], [3.3, 341.0], [3.4, 341.0], [3.5, 341.0], [3.6, 341.0], [3.7, 341.0], [3.8, 341.0], [3.9, 341.0], [4.0, 341.0], [4.1, 341.0], [4.2, 342.0], [4.3, 342.0], [4.4, 343.0], [4.5, 343.0], [4.6, 343.0], [4.7, 343.0], [4.8, 343.0], [4.9, 344.0], [5.0, 344.0], [5.1, 345.0], [5.2, 345.0], [5.3, 345.0], [5.4, 346.0], [5.5, 346.0], [5.6, 346.0], [5.7, 347.0], [5.8, 347.0], [5.9, 347.0], [6.0, 347.0], [6.1, 347.0], [6.2, 347.0], [6.3, 347.0], [6.4, 347.0], [6.5, 347.0], [6.6, 347.0], [6.7, 348.0], [6.8, 348.0], [6.9, 348.0], [7.0, 348.0], [7.1, 348.0], [7.2, 348.0], [7.3, 348.0], [7.4, 348.0], [7.5, 348.0], [7.6, 348.0], [7.7, 348.0], [7.8, 348.0], [7.9, 349.0], [8.0, 349.0], [8.1, 349.0], [8.2, 349.0], [8.3, 349.0], [8.4, 350.0], [8.5, 350.0], [8.6, 350.0], [8.7, 350.0], [8.8, 350.0], [8.9, 350.0], [9.0, 350.0], [9.1, 350.0], [9.2, 350.0], [9.3, 350.0], [9.4, 350.0], [9.5, 351.0], [9.6, 351.0], [9.7, 351.0], [9.8, 351.0], [9.9, 351.0], [10.0, 351.0], [10.1, 351.0], [10.2, 351.0], [10.3, 352.0], [10.4, 352.0], [10.5, 352.0], [10.6, 353.0], [10.7, 353.0], [10.8, 353.0], [10.9, 353.0], [11.0, 354.0], [11.1, 354.0], [11.2, 354.0], [11.3, 354.0], [11.4, 354.0], [11.5, 354.0], [11.6, 354.0], [11.7, 354.0], [11.8, 354.0], [11.9, 355.0], [12.0, 355.0], [12.1, 355.0], [12.2, 355.0], [12.3, 355.0], [12.4, 355.0], [12.5, 355.0], [12.6, 355.0], [12.7, 355.0], [12.8, 355.0], [12.9, 355.0], [13.0, 355.0], [13.1, 355.0], [13.2, 355.0], [13.3, 355.0], [13.4, 356.0], [13.5, 356.0], [13.6, 356.0], [13.7, 356.0], [13.8, 357.0], [13.9, 358.0], [14.0, 358.0], [14.1, 358.0], [14.2, 358.0], [14.3, 358.0], [14.4, 358.0], [14.5, 359.0], [14.6, 359.0], [14.7, 359.0], [14.8, 359.0], [14.9, 359.0], [15.0, 359.0], [15.1, 359.0], [15.2, 360.0], [15.3, 360.0], [15.4, 360.0], [15.5, 360.0], [15.6, 360.0], [15.7, 360.0], [15.8, 361.0], [15.9, 361.0], [16.0, 361.0], [16.1, 361.0], [16.2, 361.0], [16.3, 361.0], [16.4, 362.0], [16.5, 362.0], [16.6, 362.0], [16.7, 363.0], [16.8, 363.0], [16.9, 364.0], [17.0, 364.0], [17.1, 364.0], [17.2, 364.0], [17.3, 364.0], [17.4, 364.0], [17.5, 364.0], [17.6, 364.0], [17.7, 364.0], [17.8, 365.0], [17.9, 365.0], [18.0, 365.0], [18.1, 365.0], [18.2, 365.0], [18.3, 365.0], [18.4, 365.0], [18.5, 365.0], [18.6, 365.0], [18.7, 365.0], [18.8, 366.0], [18.9, 366.0], [19.0, 366.0], [19.1, 366.0], [19.2, 366.0], [19.3, 366.0], [19.4, 366.0], [19.5, 366.0], [19.6, 367.0], [19.7, 367.0], [19.8, 367.0], [19.9, 367.0], [20.0, 367.0], [20.1, 367.0], [20.2, 367.0], [20.3, 367.0], [20.4, 367.0], [20.5, 367.0], [20.6, 369.0], [20.7, 369.0], [20.8, 369.0], [20.9, 369.0], [21.0, 369.0], [21.1, 370.0], [21.2, 370.0], [21.3, 370.0], [21.4, 370.0], [21.5, 370.0], [21.6, 370.0], [21.7, 371.0], [21.8, 371.0], [21.9, 371.0], [22.0, 371.0], [22.1, 371.0], [22.2, 371.0], [22.3, 371.0], [22.4, 371.0], [22.5, 371.0], [22.6, 372.0], [22.7, 372.0], [22.8, 372.0], [22.9, 373.0], [23.0, 373.0], [23.1, 373.0], [23.2, 373.0], [23.3, 373.0], [23.4, 373.0], [23.5, 373.0], [23.6, 374.0], [23.7, 374.0], [23.8, 374.0], [23.9, 374.0], [24.0, 375.0], [24.1, 375.0], [24.2, 375.0], [24.3, 376.0], [24.4, 376.0], [24.5, 376.0], [24.6, 377.0], [24.7, 377.0], [24.8, 377.0], [24.9, 377.0], [25.0, 377.0], [25.1, 377.0], [25.2, 378.0], [25.3, 378.0], [25.4, 379.0], [25.5, 379.0], [25.6, 379.0], [25.7, 380.0], [25.8, 380.0], [25.9, 380.0], [26.0, 380.0], [26.1, 381.0], [26.2, 381.0], [26.3, 381.0], [26.4, 381.0], [26.5, 382.0], [26.6, 382.0], [26.7, 382.0], [26.8, 383.0], [26.9, 383.0], [27.0, 383.0], [27.1, 383.0], [27.2, 383.0], [27.3, 384.0], [27.4, 384.0], [27.5, 384.0], [27.6, 384.0], [27.7, 384.0], [27.8, 385.0], [27.9, 385.0], [28.0, 385.0], [28.1, 385.0], [28.2, 385.0], [28.3, 385.0], [28.4, 387.0], [28.5, 387.0], [28.6, 387.0], [28.7, 387.0], [28.8, 387.0], [28.9, 387.0], [29.0, 387.0], [29.1, 387.0], [29.2, 388.0], [29.3, 388.0], [29.4, 388.0], [29.5, 388.0], [29.6, 388.0], [29.7, 388.0], [29.8, 389.0], [29.9, 389.0], [30.0, 389.0], [30.1, 390.0], [30.2, 390.0], [30.3, 390.0], [30.4, 390.0], [30.5, 390.0], [30.6, 390.0], [30.7, 391.0], [30.8, 391.0], [30.9, 391.0], [31.0, 392.0], [31.1, 392.0], [31.2, 392.0], [31.3, 393.0], [31.4, 393.0], [31.5, 393.0], [31.6, 393.0], [31.7, 393.0], [31.8, 393.0], [31.9, 394.0], [32.0, 394.0], [32.1, 394.0], [32.2, 394.0], [32.3, 395.0], [32.4, 395.0], [32.5, 395.0], [32.6, 395.0], [32.7, 395.0], [32.8, 395.0], [32.9, 396.0], [33.0, 396.0], [33.1, 397.0], [33.2, 397.0], [33.3, 397.0], [33.4, 397.0], [33.5, 397.0], [33.6, 398.0], [33.7, 398.0], [33.8, 399.0], [33.9, 399.0], [34.0, 399.0], [34.1, 400.0], [34.2, 400.0], [34.3, 400.0], [34.4, 400.0], [34.5, 400.0], [34.6, 400.0], [34.7, 401.0], [34.8, 401.0], [34.9, 401.0], [35.0, 401.0], [35.1, 401.0], [35.2, 401.0], [35.3, 401.0], [35.4, 401.0], [35.5, 401.0], [35.6, 402.0], [35.7, 402.0], [35.8, 402.0], [35.9, 402.0], [36.0, 403.0], [36.1, 403.0], [36.2, 404.0], [36.3, 404.0], [36.4, 405.0], [36.5, 405.0], [36.6, 405.0], [36.7, 405.0], [36.8, 405.0], [36.9, 405.0], [37.0, 406.0], [37.1, 407.0], [37.2, 408.0], [37.3, 408.0], [37.4, 408.0], [37.5, 409.0], [37.6, 409.0], [37.7, 409.0], [37.8, 409.0], [37.9, 409.0], [38.0, 409.0], [38.1, 410.0], [38.2, 411.0], [38.3, 411.0], [38.4, 411.0], [38.5, 411.0], [38.6, 412.0], [38.7, 412.0], [38.8, 412.0], [38.9, 412.0], [39.0, 412.0], [39.1, 413.0], [39.2, 413.0], [39.3, 414.0], [39.4, 414.0], [39.5, 415.0], [39.6, 415.0], [39.7, 415.0], [39.8, 415.0], [39.9, 415.0], [40.0, 416.0], [40.1, 416.0], [40.2, 416.0], [40.3, 416.0], [40.4, 416.0], [40.5, 416.0], [40.6, 417.0], [40.7, 418.0], [40.8, 418.0], [40.9, 418.0], [41.0, 419.0], [41.1, 419.0], [41.2, 419.0], [41.3, 420.0], [41.4, 420.0], [41.5, 420.0], [41.6, 421.0], [41.7, 421.0], [41.8, 421.0], [41.9, 421.0], [42.0, 422.0], [42.1, 422.0], [42.2, 422.0], [42.3, 422.0], [42.4, 422.0], [42.5, 422.0], [42.6, 423.0], [42.7, 423.0], [42.8, 424.0], [42.9, 424.0], [43.0, 424.0], [43.1, 425.0], [43.2, 425.0], [43.3, 425.0], [43.4, 427.0], [43.5, 427.0], [43.6, 427.0], [43.7, 428.0], [43.8, 428.0], [43.9, 428.0], [44.0, 429.0], [44.1, 430.0], [44.2, 430.0], [44.3, 431.0], [44.4, 431.0], [44.5, 431.0], [44.6, 432.0], [44.7, 433.0], [44.8, 433.0], [44.9, 433.0], [45.0, 433.0], [45.1, 434.0], [45.2, 434.0], [45.3, 435.0], [45.4, 437.0], [45.5, 437.0], [45.6, 437.0], [45.7, 437.0], [45.8, 437.0], [45.9, 438.0], [46.0, 438.0], [46.1, 438.0], [46.2, 438.0], [46.3, 439.0], [46.4, 439.0], [46.5, 440.0], [46.6, 440.0], [46.7, 441.0], [46.8, 442.0], [46.9, 445.0], [47.0, 445.0], [47.1, 446.0], [47.2, 446.0], [47.3, 446.0], [47.4, 446.0], [47.5, 447.0], [47.6, 447.0], [47.7, 448.0], [47.8, 449.0], [47.9, 449.0], [48.0, 449.0], [48.1, 449.0], [48.2, 449.0], [48.3, 450.0], [48.4, 451.0], [48.5, 451.0], [48.6, 452.0], [48.7, 452.0], [48.8, 452.0], [48.9, 452.0], [49.0, 452.0], [49.1, 455.0], [49.2, 456.0], [49.3, 457.0], [49.4, 457.0], [49.5, 458.0], [49.6, 458.0], [49.7, 458.0], [49.8, 458.0], [49.9, 458.0], [50.0, 459.0], [50.1, 459.0], [50.2, 459.0], [50.3, 460.0], [50.4, 460.0], [50.5, 461.0], [50.6, 461.0], [50.7, 462.0], [50.8, 463.0], [50.9, 463.0], [51.0, 463.0], [51.1, 465.0], [51.2, 465.0], [51.3, 466.0], [51.4, 466.0], [51.5, 466.0], [51.6, 466.0], [51.7, 466.0], [51.8, 466.0], [51.9, 467.0], [52.0, 467.0], [52.1, 467.0], [52.2, 467.0], [52.3, 467.0], [52.4, 468.0], [52.5, 469.0], [52.6, 469.0], [52.7, 470.0], [52.8, 470.0], [52.9, 470.0], [53.0, 470.0], [53.1, 471.0], [53.2, 472.0], [53.3, 472.0], [53.4, 473.0], [53.5, 473.0], [53.6, 475.0], [53.7, 476.0], [53.8, 476.0], [53.9, 477.0], [54.0, 478.0], [54.1, 478.0], [54.2, 478.0], [54.3, 478.0], [54.4, 479.0], [54.5, 479.0], [54.6, 480.0], [54.7, 480.0], [54.8, 480.0], [54.9, 480.0], [55.0, 480.0], [55.1, 480.0], [55.2, 482.0], [55.3, 483.0], [55.4, 483.0], [55.5, 483.0], [55.6, 483.0], [55.7, 484.0], [55.8, 484.0], [55.9, 484.0], [56.0, 484.0], [56.1, 484.0], [56.2, 484.0], [56.3, 485.0], [56.4, 486.0], [56.5, 486.0], [56.6, 486.0], [56.7, 486.0], [56.8, 487.0], [56.9, 487.0], [57.0, 487.0], [57.1, 488.0], [57.2, 489.0], [57.3, 489.0], [57.4, 489.0], [57.5, 489.0], [57.6, 489.0], [57.7, 490.0], [57.8, 491.0], [57.9, 491.0], [58.0, 491.0], [58.1, 491.0], [58.2, 491.0], [58.3, 492.0], [58.4, 492.0], [58.5, 492.0], [58.6, 492.0], [58.7, 494.0], [58.8, 496.0], [58.9, 496.0], [59.0, 496.0], [59.1, 498.0], [59.2, 498.0], [59.3, 498.0], [59.4, 499.0], [59.5, 499.0], [59.6, 500.0], [59.7, 500.0], [59.8, 500.0], [59.9, 500.0], [60.0, 501.0], [60.1, 502.0], [60.2, 504.0], [60.3, 504.0], [60.4, 504.0], [60.5, 504.0], [60.6, 504.0], [60.7, 508.0], [60.8, 508.0], [60.9, 508.0], [61.0, 509.0], [61.1, 510.0], [61.2, 510.0], [61.3, 510.0], [61.4, 513.0], [61.5, 514.0], [61.6, 514.0], [61.7, 514.0], [61.8, 515.0], [61.9, 516.0], [62.0, 516.0], [62.1, 516.0], [62.2, 517.0], [62.3, 517.0], [62.4, 517.0], [62.5, 519.0], [62.6, 519.0], [62.7, 519.0], [62.8, 519.0], [62.9, 519.0], [63.0, 519.0], [63.1, 520.0], [63.2, 520.0], [63.3, 523.0], [63.4, 523.0], [63.5, 524.0], [63.6, 524.0], [63.7, 524.0], [63.8, 524.0], [63.9, 525.0], [64.0, 525.0], [64.1, 527.0], [64.2, 527.0], [64.3, 527.0], [64.4, 527.0], [64.5, 528.0], [64.6, 528.0], [64.7, 528.0], [64.8, 529.0], [64.9, 529.0], [65.0, 529.0], [65.1, 530.0], [65.2, 530.0], [65.3, 531.0], [65.4, 531.0], [65.5, 531.0], [65.6, 531.0], [65.7, 531.0], [65.8, 531.0], [65.9, 531.0], [66.0, 532.0], [66.1, 532.0], [66.2, 532.0], [66.3, 534.0], [66.4, 534.0], [66.5, 534.0], [66.6, 535.0], [66.7, 535.0], [66.8, 535.0], [66.9, 535.0], [67.0, 535.0], [67.1, 535.0], [67.2, 535.0], [67.3, 535.0], [67.4, 536.0], [67.5, 536.0], [67.6, 536.0], [67.7, 537.0], [67.8, 537.0], [67.9, 537.0], [68.0, 538.0], [68.1, 538.0], [68.2, 538.0], [68.3, 538.0], [68.4, 540.0], [68.5, 540.0], [68.6, 541.0], [68.7, 541.0], [68.8, 542.0], [68.9, 542.0], [69.0, 542.0], [69.1, 542.0], [69.2, 542.0], [69.3, 543.0], [69.4, 543.0], [69.5, 544.0], [69.6, 544.0], [69.7, 545.0], [69.8, 545.0], [69.9, 545.0], [70.0, 546.0], [70.1, 546.0], [70.2, 547.0], [70.3, 547.0], [70.4, 547.0], [70.5, 547.0], [70.6, 547.0], [70.7, 548.0], [70.8, 548.0], [70.9, 549.0], [71.0, 549.0], [71.1, 550.0], [71.2, 550.0], [71.3, 550.0], [71.4, 550.0], [71.5, 551.0], [71.6, 553.0], [71.7, 553.0], [71.8, 554.0], [71.9, 554.0], [72.0, 554.0], [72.1, 554.0], [72.2, 555.0], [72.3, 556.0], [72.4, 556.0], [72.5, 557.0], [72.6, 557.0], [72.7, 558.0], [72.8, 558.0], [72.9, 558.0], [73.0, 559.0], [73.1, 559.0], [73.2, 559.0], [73.3, 560.0], [73.4, 560.0], [73.5, 561.0], [73.6, 561.0], [73.7, 561.0], [73.8, 561.0], [73.9, 562.0], [74.0, 563.0], [74.1, 564.0], [74.2, 564.0], [74.3, 564.0], [74.4, 565.0], [74.5, 565.0], [74.6, 566.0], [74.7, 566.0], [74.8, 568.0], [74.9, 568.0], [75.0, 568.0], [75.1, 569.0], [75.2, 569.0], [75.3, 569.0], [75.4, 571.0], [75.5, 572.0], [75.6, 572.0], [75.7, 573.0], [75.8, 574.0], [75.9, 574.0], [76.0, 574.0], [76.1, 576.0], [76.2, 576.0], [76.3, 576.0], [76.4, 576.0], [76.5, 576.0], [76.6, 578.0], [76.7, 578.0], [76.8, 578.0], [76.9, 579.0], [77.0, 579.0], [77.1, 579.0], [77.2, 580.0], [77.3, 581.0], [77.4, 581.0], [77.5, 581.0], [77.6, 581.0], [77.7, 582.0], [77.8, 582.0], [77.9, 583.0], [78.0, 583.0], [78.1, 583.0], [78.2, 583.0], [78.3, 583.0], [78.4, 586.0], [78.5, 586.0], [78.6, 587.0], [78.7, 589.0], [78.8, 591.0], [78.9, 591.0], [79.0, 593.0], [79.1, 593.0], [79.2, 593.0], [79.3, 593.0], [79.4, 594.0], [79.5, 594.0], [79.6, 594.0], [79.7, 595.0], [79.8, 595.0], [79.9, 595.0], [80.0, 596.0], [80.1, 597.0], [80.2, 597.0], [80.3, 597.0], [80.4, 598.0], [80.5, 598.0], [80.6, 598.0], [80.7, 598.0], [80.8, 599.0], [80.9, 600.0], [81.0, 600.0], [81.1, 600.0], [81.2, 600.0], [81.3, 602.0], [81.4, 602.0], [81.5, 602.0], [81.6, 602.0], [81.7, 603.0], [81.8, 603.0], [81.9, 604.0], [82.0, 604.0], [82.1, 608.0], [82.2, 608.0], [82.3, 608.0], [82.4, 609.0], [82.5, 611.0], [82.6, 611.0], [82.7, 611.0], [82.8, 613.0], [82.9, 613.0], [83.0, 613.0], [83.1, 613.0], [83.2, 613.0], [83.3, 614.0], [83.4, 614.0], [83.5, 615.0], [83.6, 615.0], [83.7, 616.0], [83.8, 616.0], [83.9, 620.0], [84.0, 621.0], [84.1, 622.0], [84.2, 625.0], [84.3, 625.0], [84.4, 626.0], [84.5, 626.0], [84.6, 626.0], [84.7, 628.0], [84.8, 629.0], [84.9, 630.0], [85.0, 630.0], [85.1, 632.0], [85.2, 632.0], [85.3, 632.0], [85.4, 634.0], [85.5, 636.0], [85.6, 638.0], [85.7, 638.0], [85.8, 641.0], [85.9, 643.0], [86.0, 644.0], [86.1, 644.0], [86.2, 645.0], [86.3, 646.0], [86.4, 648.0], [86.5, 649.0], [86.6, 652.0], [86.7, 653.0], [86.8, 653.0], [86.9, 653.0], [87.0, 655.0], [87.1, 655.0], [87.2, 655.0], [87.3, 660.0], [87.4, 660.0], [87.5, 660.0], [87.6, 660.0], [87.7, 662.0], [87.8, 662.0], [87.9, 662.0], [88.0, 664.0], [88.1, 667.0], [88.2, 669.0], [88.3, 673.0], [88.4, 673.0], [88.5, 675.0], [88.6, 676.0], [88.7, 678.0], [88.8, 679.0], [88.9, 680.0], [89.0, 681.0], [89.1, 683.0], [89.2, 683.0], [89.3, 683.0], [89.4, 684.0], [89.5, 684.0], [89.6, 686.0], [89.7, 689.0], [89.8, 695.0], [89.9, 700.0], [90.0, 700.0], [90.1, 701.0], [90.2, 701.0], [90.3, 703.0], [90.4, 704.0], [90.5, 705.0], [90.6, 706.0], [90.7, 706.0], [90.8, 706.0], [90.9, 709.0], [91.0, 713.0], [91.1, 717.0], [91.2, 719.0], [91.3, 723.0], [91.4, 727.0], [91.5, 727.0], [91.6, 727.0], [91.7, 734.0], [91.8, 734.0], [91.9, 739.0], [92.0, 741.0], [92.1, 741.0], [92.2, 745.0], [92.3, 745.0], [92.4, 747.0], [92.5, 747.0], [92.6, 755.0], [92.7, 758.0], [92.8, 762.0], [92.9, 767.0], [93.0, 772.0], [93.1, 772.0], [93.2, 774.0], [93.3, 774.0], [93.4, 778.0], [93.5, 780.0], [93.6, 788.0], [93.7, 790.0], [93.8, 790.0], [93.9, 798.0], [94.0, 802.0], [94.1, 805.0], [94.2, 806.0], [94.3, 807.0], [94.4, 808.0], [94.5, 809.0], [94.6, 809.0], [94.7, 812.0], [94.8, 814.0], [94.9, 815.0], [95.0, 823.0], [95.1, 824.0], [95.2, 825.0], [95.3, 828.0], [95.4, 828.0], [95.5, 837.0], [95.6, 842.0], [95.7, 842.0], [95.8, 844.0], [95.9, 847.0], [96.0, 847.0], [96.1, 852.0], [96.2, 852.0], [96.3, 857.0], [96.4, 859.0], [96.5, 861.0], [96.6, 863.0], [96.7, 869.0], [96.8, 878.0], [96.9, 878.0], [97.0, 883.0], [97.1, 888.0], [97.2, 892.0], [97.3, 902.0], [97.4, 904.0], [97.5, 905.0], [97.6, 925.0], [97.7, 925.0], [97.8, 955.0], [97.9, 957.0], [98.0, 978.0], [98.1, 1004.0], [98.2, 1011.0], [98.3, 1016.0], [98.4, 1025.0], [98.5, 1025.0], [98.6, 1192.0], [98.7, 1193.0], [98.8, 1197.0], [98.9, 1216.0], [99.0, 1276.0], [99.1, 1297.0], [99.2, 1388.0], [99.3, 1388.0], [99.4, 1388.0], [99.5, 1440.0], [99.6, 1478.0], [99.7, 1638.0], [99.8, 1706.0], [99.9, 1909.0], [100.0, 1909.0]], "isOverall": false, "label": "Get Drafts Gmail List", "isController": false}, {"data": [[0.0, 164.0], [0.1, 164.0], [0.2, 164.0], [0.3, 164.0], [0.4, 165.0], [0.5, 165.0], [0.6, 166.0], [0.7, 166.0], [0.8, 166.0], [0.9, 167.0], [1.0, 167.0], [1.1, 168.0], [1.2, 168.0], [1.3, 169.0], [1.4, 170.0], [1.5, 170.0], [1.6, 170.0], [1.7, 170.0], [1.8, 170.0], [1.9, 170.0], [2.0, 170.0], [2.1, 170.0], [2.2, 170.0], [2.3, 170.0], [2.4, 170.0], [2.5, 171.0], [2.6, 171.0], [2.7, 171.0], [2.8, 172.0], [2.9, 172.0], [3.0, 172.0], [3.1, 172.0], [3.2, 172.0], [3.3, 172.0], [3.4, 172.0], [3.5, 172.0], [3.6, 172.0], [3.7, 172.0], [3.8, 173.0], [3.9, 173.0], [4.0, 173.0], [4.1, 173.0], [4.2, 173.0], [4.3, 173.0], [4.4, 173.0], [4.5, 173.0], [4.6, 173.0], [4.7, 173.0], [4.8, 173.0], [4.9, 173.0], [5.0, 173.0], [5.1, 173.0], [5.2, 173.0], [5.3, 173.0], [5.4, 174.0], [5.5, 174.0], [5.6, 174.0], [5.7, 174.0], [5.8, 174.0], [5.9, 174.0], [6.0, 174.0], [6.1, 174.0], [6.2, 174.0], [6.3, 174.0], [6.4, 174.0], [6.5, 174.0], [6.6, 174.0], [6.7, 174.0], [6.8, 175.0], [6.9, 175.0], [7.0, 175.0], [7.1, 175.0], [7.2, 175.0], [7.3, 175.0], [7.4, 175.0], [7.5, 175.0], [7.6, 175.0], [7.7, 175.0], [7.8, 175.0], [7.9, 175.0], [8.0, 176.0], [8.1, 176.0], [8.2, 176.0], [8.3, 176.0], [8.4, 176.0], [8.5, 176.0], [8.6, 176.0], [8.7, 177.0], [8.8, 177.0], [8.9, 177.0], [9.0, 177.0], [9.1, 177.0], [9.2, 177.0], [9.3, 177.0], [9.4, 178.0], [9.5, 178.0], [9.6, 178.0], [9.7, 178.0], [9.8, 178.0], [9.9, 178.0], [10.0, 178.0], [10.1, 179.0], [10.2, 179.0], [10.3, 179.0], [10.4, 179.0], [10.5, 179.0], [10.6, 179.0], [10.7, 179.0], [10.8, 179.0], [10.9, 179.0], [11.0, 179.0], [11.1, 179.0], [11.2, 179.0], [11.3, 179.0], [11.4, 179.0], [11.5, 179.0], [11.6, 179.0], [11.7, 179.0], [11.8, 179.0], [11.9, 179.0], [12.0, 180.0], [12.1, 180.0], [12.2, 180.0], [12.3, 180.0], [12.4, 180.0], [12.5, 180.0], [12.6, 180.0], [12.7, 180.0], [12.8, 180.0], [12.9, 180.0], [13.0, 180.0], [13.1, 180.0], [13.2, 180.0], [13.3, 181.0], [13.4, 181.0], [13.5, 181.0], [13.6, 181.0], [13.7, 181.0], [13.8, 181.0], [13.9, 181.0], [14.0, 181.0], [14.1, 181.0], [14.2, 182.0], [14.3, 182.0], [14.4, 182.0], [14.5, 182.0], [14.6, 182.0], [14.7, 182.0], [14.8, 182.0], [14.9, 182.0], [15.0, 182.0], [15.1, 182.0], [15.2, 183.0], [15.3, 183.0], [15.4, 183.0], [15.5, 183.0], [15.6, 183.0], [15.7, 183.0], [15.8, 183.0], [15.9, 183.0], [16.0, 183.0], [16.1, 183.0], [16.2, 183.0], [16.3, 184.0], [16.4, 184.0], [16.5, 184.0], [16.6, 184.0], [16.7, 184.0], [16.8, 184.0], [16.9, 184.0], [17.0, 184.0], [17.1, 184.0], [17.2, 184.0], [17.3, 184.0], [17.4, 184.0], [17.5, 184.0], [17.6, 184.0], [17.7, 184.0], [17.8, 184.0], [17.9, 184.0], [18.0, 185.0], [18.1, 185.0], [18.2, 185.0], [18.3, 185.0], [18.4, 185.0], [18.5, 185.0], [18.6, 185.0], [18.7, 185.0], [18.8, 185.0], [18.9, 185.0], [19.0, 185.0], [19.1, 185.0], [19.2, 185.0], [19.3, 185.0], [19.4, 185.0], [19.5, 185.0], [19.6, 185.0], [19.7, 185.0], [19.8, 185.0], [19.9, 185.0], [20.0, 185.0], [20.1, 185.0], [20.2, 185.0], [20.3, 186.0], [20.4, 186.0], [20.5, 186.0], [20.6, 186.0], [20.7, 186.0], [20.8, 186.0], [20.9, 186.0], [21.0, 186.0], [21.1, 186.0], [21.2, 186.0], [21.3, 186.0], [21.4, 186.0], [21.5, 186.0], [21.6, 187.0], [21.7, 187.0], [21.8, 187.0], [21.9, 187.0], [22.0, 187.0], [22.1, 187.0], [22.2, 187.0], [22.3, 187.0], [22.4, 187.0], [22.5, 187.0], [22.6, 187.0], [22.7, 187.0], [22.8, 187.0], [22.9, 187.0], [23.0, 187.0], [23.1, 187.0], [23.2, 187.0], [23.3, 187.0], [23.4, 187.0], [23.5, 187.0], [23.6, 187.0], [23.7, 187.0], [23.8, 187.0], [23.9, 188.0], [24.0, 188.0], [24.1, 188.0], [24.2, 188.0], [24.3, 188.0], [24.4, 188.0], [24.5, 188.0], [24.6, 188.0], [24.7, 188.0], [24.8, 188.0], [24.9, 188.0], [25.0, 188.0], [25.1, 188.0], [25.2, 188.0], [25.3, 188.0], [25.4, 188.0], [25.5, 188.0], [25.6, 189.0], [25.7, 189.0], [25.8, 189.0], [25.9, 189.0], [26.0, 189.0], [26.1, 189.0], [26.2, 189.0], [26.3, 189.0], [26.4, 189.0], [26.5, 189.0], [26.6, 189.0], [26.7, 189.0], [26.8, 189.0], [26.9, 189.0], [27.0, 189.0], [27.1, 189.0], [27.2, 190.0], [27.3, 190.0], [27.4, 190.0], [27.5, 190.0], [27.6, 190.0], [27.7, 190.0], [27.8, 190.0], [27.9, 190.0], [28.0, 190.0], [28.1, 190.0], [28.2, 190.0], [28.3, 190.0], [28.4, 190.0], [28.5, 190.0], [28.6, 190.0], [28.7, 190.0], [28.8, 190.0], [28.9, 190.0], [29.0, 190.0], [29.1, 190.0], [29.2, 190.0], [29.3, 190.0], [29.4, 190.0], [29.5, 190.0], [29.6, 190.0], [29.7, 190.0], [29.8, 191.0], [29.9, 191.0], [30.0, 191.0], [30.1, 191.0], [30.2, 191.0], [30.3, 191.0], [30.4, 191.0], [30.5, 191.0], [30.6, 191.0], [30.7, 191.0], [30.8, 191.0], [30.9, 191.0], [31.0, 191.0], [31.1, 191.0], [31.2, 191.0], [31.3, 191.0], [31.4, 191.0], [31.5, 192.0], [31.6, 192.0], [31.7, 192.0], [31.8, 192.0], [31.9, 192.0], [32.0, 192.0], [32.1, 192.0], [32.2, 192.0], [32.3, 192.0], [32.4, 192.0], [32.5, 192.0], [32.6, 192.0], [32.7, 192.0], [32.8, 192.0], [32.9, 192.0], [33.0, 192.0], [33.1, 192.0], [33.2, 192.0], [33.3, 192.0], [33.4, 192.0], [33.5, 192.0], [33.6, 192.0], [33.7, 192.0], [33.8, 192.0], [33.9, 193.0], [34.0, 193.0], [34.1, 193.0], [34.2, 193.0], [34.3, 193.0], [34.4, 193.0], [34.5, 193.0], [34.6, 193.0], [34.7, 193.0], [34.8, 193.0], [34.9, 193.0], [35.0, 193.0], [35.1, 193.0], [35.2, 193.0], [35.3, 193.0], [35.4, 193.0], [35.5, 193.0], [35.6, 193.0], [35.7, 193.0], [35.8, 193.0], [35.9, 193.0], [36.0, 193.0], [36.1, 193.0], [36.2, 193.0], [36.3, 193.0], [36.4, 193.0], [36.5, 193.0], [36.6, 193.0], [36.7, 193.0], [36.8, 193.0], [36.9, 193.0], [37.0, 193.0], [37.1, 193.0], [37.2, 193.0], [37.3, 193.0], [37.4, 193.0], [37.5, 193.0], [37.6, 193.0], [37.7, 193.0], [37.8, 193.0], [37.9, 193.0], [38.0, 193.0], [38.1, 193.0], [38.2, 193.0], [38.3, 193.0], [38.4, 193.0], [38.5, 193.0], [38.6, 193.0], [38.7, 193.0], [38.8, 193.0], [38.9, 194.0], [39.0, 194.0], [39.1, 194.0], [39.2, 194.0], [39.3, 194.0], [39.4, 194.0], [39.5, 194.0], [39.6, 194.0], [39.7, 194.0], [39.8, 194.0], [39.9, 194.0], [40.0, 194.0], [40.1, 194.0], [40.2, 194.0], [40.3, 194.0], [40.4, 194.0], [40.5, 194.0], [40.6, 194.0], [40.7, 194.0], [40.8, 194.0], [40.9, 194.0], [41.0, 194.0], [41.1, 194.0], [41.2, 195.0], [41.3, 195.0], [41.4, 195.0], [41.5, 195.0], [41.6, 195.0], [41.7, 195.0], [41.8, 195.0], [41.9, 195.0], [42.0, 195.0], [42.1, 195.0], [42.2, 195.0], [42.3, 195.0], [42.4, 195.0], [42.5, 196.0], [42.6, 196.0], [42.7, 196.0], [42.8, 196.0], [42.9, 196.0], [43.0, 196.0], [43.1, 196.0], [43.2, 196.0], [43.3, 196.0], [43.4, 196.0], [43.5, 196.0], [43.6, 197.0], [43.7, 197.0], [43.8, 197.0], [43.9, 197.0], [44.0, 197.0], [44.1, 197.0], [44.2, 197.0], [44.3, 197.0], [44.4, 197.0], [44.5, 197.0], [44.6, 197.0], [44.7, 197.0], [44.8, 197.0], [44.9, 197.0], [45.0, 197.0], [45.1, 197.0], [45.2, 197.0], [45.3, 197.0], [45.4, 197.0], [45.5, 198.0], [45.6, 198.0], [45.7, 198.0], [45.8, 198.0], [45.9, 198.0], [46.0, 198.0], [46.1, 198.0], [46.2, 198.0], [46.3, 198.0], [46.4, 198.0], [46.5, 198.0], [46.6, 198.0], [46.7, 198.0], [46.8, 198.0], [46.9, 199.0], [47.0, 199.0], [47.1, 199.0], [47.2, 199.0], [47.3, 199.0], [47.4, 199.0], [47.5, 199.0], [47.6, 199.0], [47.7, 199.0], [47.8, 199.0], [47.9, 199.0], [48.0, 199.0], [48.1, 200.0], [48.2, 200.0], [48.3, 200.0], [48.4, 200.0], [48.5, 200.0], [48.6, 200.0], [48.7, 200.0], [48.8, 200.0], [48.9, 200.0], [49.0, 200.0], [49.1, 200.0], [49.2, 200.0], [49.3, 200.0], [49.4, 200.0], [49.5, 200.0], [49.6, 200.0], [49.7, 200.0], [49.8, 200.0], [49.9, 200.0], [50.0, 200.0], [50.1, 200.0], [50.2, 200.0], [50.3, 200.0], [50.4, 200.0], [50.5, 200.0], [50.6, 200.0], [50.7, 200.0], [50.8, 200.0], [50.9, 200.0], [51.0, 201.0], [51.1, 201.0], [51.2, 201.0], [51.3, 201.0], [51.4, 201.0], [51.5, 201.0], [51.6, 201.0], [51.7, 201.0], [51.8, 201.0], [51.9, 201.0], [52.0, 201.0], [52.1, 201.0], [52.2, 201.0], [52.3, 201.0], [52.4, 201.0], [52.5, 201.0], [52.6, 201.0], [52.7, 201.0], [52.8, 201.0], [52.9, 202.0], [53.0, 202.0], [53.1, 202.0], [53.2, 202.0], [53.3, 202.0], [53.4, 202.0], [53.5, 202.0], [53.6, 202.0], [53.7, 202.0], [53.8, 202.0], [53.9, 202.0], [54.0, 202.0], [54.1, 202.0], [54.2, 202.0], [54.3, 202.0], [54.4, 202.0], [54.5, 202.0], [54.6, 203.0], [54.7, 203.0], [54.8, 203.0], [54.9, 203.0], [55.0, 203.0], [55.1, 203.0], [55.2, 203.0], [55.3, 203.0], [55.4, 203.0], [55.5, 203.0], [55.6, 203.0], [55.7, 203.0], [55.8, 204.0], [55.9, 204.0], [56.0, 204.0], [56.1, 204.0], [56.2, 204.0], [56.3, 204.0], [56.4, 204.0], [56.5, 204.0], [56.6, 204.0], [56.7, 204.0], [56.8, 204.0], [56.9, 205.0], [57.0, 205.0], [57.1, 205.0], [57.2, 205.0], [57.3, 205.0], [57.4, 205.0], [57.5, 205.0], [57.6, 205.0], [57.7, 205.0], [57.8, 205.0], [57.9, 205.0], [58.0, 205.0], [58.1, 206.0], [58.2, 206.0], [58.3, 206.0], [58.4, 206.0], [58.5, 206.0], [58.6, 207.0], [58.7, 207.0], [58.8, 207.0], [58.9, 207.0], [59.0, 207.0], [59.1, 207.0], [59.2, 207.0], [59.3, 207.0], [59.4, 207.0], [59.5, 208.0], [59.6, 208.0], [59.7, 208.0], [59.8, 208.0], [59.9, 208.0], [60.0, 208.0], [60.1, 208.0], [60.2, 208.0], [60.3, 208.0], [60.4, 208.0], [60.5, 208.0], [60.6, 208.0], [60.7, 209.0], [60.8, 209.0], [60.9, 209.0], [61.0, 209.0], [61.1, 209.0], [61.2, 209.0], [61.3, 209.0], [61.4, 209.0], [61.5, 209.0], [61.6, 209.0], [61.7, 209.0], [61.8, 209.0], [61.9, 210.0], [62.0, 210.0], [62.1, 210.0], [62.2, 210.0], [62.3, 210.0], [62.4, 210.0], [62.5, 210.0], [62.6, 210.0], [62.7, 210.0], [62.8, 210.0], [62.9, 210.0], [63.0, 210.0], [63.1, 210.0], [63.2, 210.0], [63.3, 211.0], [63.4, 211.0], [63.5, 211.0], [63.6, 212.0], [63.7, 212.0], [63.8, 213.0], [63.9, 213.0], [64.0, 213.0], [64.1, 213.0], [64.2, 213.0], [64.3, 214.0], [64.4, 214.0], [64.5, 214.0], [64.6, 214.0], [64.7, 214.0], [64.8, 214.0], [64.9, 214.0], [65.0, 214.0], [65.1, 214.0], [65.2, 214.0], [65.3, 214.0], [65.4, 214.0], [65.5, 215.0], [65.6, 215.0], [65.7, 215.0], [65.8, 215.0], [65.9, 215.0], [66.0, 215.0], [66.1, 215.0], [66.2, 215.0], [66.3, 215.0], [66.4, 215.0], [66.5, 215.0], [66.6, 215.0], [66.7, 216.0], [66.8, 216.0], [66.9, 216.0], [67.0, 216.0], [67.1, 216.0], [67.2, 216.0], [67.3, 216.0], [67.4, 216.0], [67.5, 216.0], [67.6, 217.0], [67.7, 217.0], [67.8, 217.0], [67.9, 217.0], [68.0, 217.0], [68.1, 217.0], [68.2, 217.0], [68.3, 217.0], [68.4, 218.0], [68.5, 218.0], [68.6, 218.0], [68.7, 218.0], [68.8, 219.0], [68.9, 219.0], [69.0, 219.0], [69.1, 219.0], [69.2, 219.0], [69.3, 219.0], [69.4, 219.0], [69.5, 219.0], [69.6, 219.0], [69.7, 219.0], [69.8, 219.0], [69.9, 219.0], [70.0, 219.0], [70.1, 219.0], [70.2, 220.0], [70.3, 220.0], [70.4, 220.0], [70.5, 220.0], [70.6, 220.0], [70.7, 220.0], [70.8, 220.0], [70.9, 221.0], [71.0, 221.0], [71.1, 221.0], [71.2, 221.0], [71.3, 221.0], [71.4, 222.0], [71.5, 222.0], [71.6, 223.0], [71.7, 223.0], [71.8, 223.0], [71.9, 223.0], [72.0, 223.0], [72.1, 223.0], [72.2, 224.0], [72.3, 224.0], [72.4, 224.0], [72.5, 224.0], [72.6, 224.0], [72.7, 224.0], [72.8, 224.0], [72.9, 224.0], [73.0, 224.0], [73.1, 224.0], [73.2, 224.0], [73.3, 225.0], [73.4, 225.0], [73.5, 225.0], [73.6, 225.0], [73.7, 225.0], [73.8, 226.0], [73.9, 226.0], [74.0, 226.0], [74.1, 226.0], [74.2, 226.0], [74.3, 228.0], [74.4, 228.0], [74.5, 228.0], [74.6, 228.0], [74.7, 228.0], [74.8, 229.0], [74.9, 229.0], [75.0, 229.0], [75.1, 229.0], [75.2, 229.0], [75.3, 229.0], [75.4, 229.0], [75.5, 229.0], [75.6, 229.0], [75.7, 229.0], [75.8, 229.0], [75.9, 230.0], [76.0, 230.0], [76.1, 230.0], [76.2, 230.0], [76.3, 230.0], [76.4, 230.0], [76.5, 230.0], [76.6, 230.0], [76.7, 231.0], [76.8, 231.0], [76.9, 231.0], [77.0, 231.0], [77.1, 231.0], [77.2, 231.0], [77.3, 231.0], [77.4, 231.0], [77.5, 231.0], [77.6, 231.0], [77.7, 231.0], [77.8, 232.0], [77.9, 232.0], [78.0, 232.0], [78.1, 232.0], [78.2, 232.0], [78.3, 233.0], [78.4, 233.0], [78.5, 233.0], [78.6, 234.0], [78.7, 234.0], [78.8, 234.0], [78.9, 234.0], [79.0, 235.0], [79.1, 235.0], [79.2, 236.0], [79.3, 236.0], [79.4, 236.0], [79.5, 237.0], [79.6, 237.0], [79.7, 237.0], [79.8, 238.0], [79.9, 238.0], [80.0, 238.0], [80.1, 238.0], [80.2, 239.0], [80.3, 239.0], [80.4, 239.0], [80.5, 239.0], [80.6, 239.0], [80.7, 240.0], [80.8, 240.0], [80.9, 240.0], [81.0, 240.0], [81.1, 240.0], [81.2, 242.0], [81.3, 242.0], [81.4, 242.0], [81.5, 242.0], [81.6, 243.0], [81.7, 243.0], [81.8, 243.0], [81.9, 244.0], [82.0, 244.0], [82.1, 244.0], [82.2, 244.0], [82.3, 244.0], [82.4, 244.0], [82.5, 244.0], [82.6, 245.0], [82.7, 245.0], [82.8, 245.0], [82.9, 245.0], [83.0, 245.0], [83.1, 246.0], [83.2, 246.0], [83.3, 247.0], [83.4, 247.0], [83.5, 247.0], [83.6, 248.0], [83.7, 248.0], [83.8, 248.0], [83.9, 248.0], [84.0, 249.0], [84.1, 249.0], [84.2, 249.0], [84.3, 249.0], [84.4, 249.0], [84.5, 251.0], [84.6, 251.0], [84.7, 251.0], [84.8, 251.0], [84.9, 251.0], [85.0, 251.0], [85.1, 251.0], [85.2, 252.0], [85.3, 252.0], [85.4, 252.0], [85.5, 253.0], [85.6, 253.0], [85.7, 254.0], [85.8, 254.0], [85.9, 254.0], [86.0, 254.0], [86.1, 255.0], [86.2, 256.0], [86.3, 256.0], [86.4, 257.0], [86.5, 257.0], [86.6, 259.0], [86.7, 259.0], [86.8, 259.0], [86.9, 260.0], [87.0, 260.0], [87.1, 260.0], [87.2, 260.0], [87.3, 262.0], [87.4, 263.0], [87.5, 263.0], [87.6, 263.0], [87.7, 263.0], [87.8, 268.0], [87.9, 268.0], [88.0, 269.0], [88.1, 272.0], [88.2, 272.0], [88.3, 272.0], [88.4, 272.0], [88.5, 272.0], [88.6, 272.0], [88.7, 275.0], [88.8, 276.0], [88.9, 276.0], [89.0, 279.0], [89.1, 279.0], [89.2, 280.0], [89.3, 280.0], [89.4, 280.0], [89.5, 280.0], [89.6, 280.0], [89.7, 283.0], [89.8, 283.0], [89.9, 285.0], [90.0, 285.0], [90.1, 285.0], [90.2, 287.0], [90.3, 287.0], [90.4, 292.0], [90.5, 292.0], [90.6, 292.0], [90.7, 293.0], [90.8, 293.0], [90.9, 294.0], [91.0, 294.0], [91.1, 295.0], [91.2, 298.0], [91.3, 298.0], [91.4, 306.0], [91.5, 306.0], [91.6, 306.0], [91.7, 306.0], [91.8, 306.0], [91.9, 306.0], [92.0, 306.0], [92.1, 306.0], [92.2, 306.0], [92.3, 307.0], [92.4, 307.0], [92.5, 307.0], [92.6, 309.0], [92.7, 309.0], [92.8, 309.0], [92.9, 309.0], [93.0, 310.0], [93.1, 312.0], [93.2, 312.0], [93.3, 313.0], [93.4, 313.0], [93.5, 317.0], [93.6, 317.0], [93.7, 325.0], [93.8, 325.0], [93.9, 325.0], [94.0, 326.0], [94.1, 326.0], [94.2, 327.0], [94.3, 327.0], [94.4, 329.0], [94.5, 332.0], [94.6, 332.0], [94.7, 333.0], [94.8, 333.0], [94.9, 342.0], [95.0, 349.0], [95.1, 349.0], [95.2, 358.0], [95.3, 358.0], [95.4, 361.0], [95.5, 361.0], [95.6, 362.0], [95.7, 378.0], [95.8, 378.0], [95.9, 379.0], [96.0, 379.0], [96.1, 381.0], [96.2, 381.0], [96.3, 381.0], [96.4, 382.0], [96.5, 382.0], [96.6, 384.0], [96.7, 384.0], [96.8, 392.0], [96.9, 392.0], [97.0, 392.0], [97.1, 395.0], [97.2, 395.0], [97.3, 412.0], [97.4, 412.0], [97.5, 413.0], [97.6, 421.0], [97.7, 421.0], [97.8, 447.0], [97.9, 447.0], [98.0, 447.0], [98.1, 447.0], [98.2, 468.0], [98.3, 500.0], [98.4, 500.0], [98.5, 502.0], [98.6, 502.0], [98.7, 508.0], [98.8, 512.0], [98.9, 512.0], [99.0, 747.0], [99.1, 747.0], [99.2, 839.0], [99.3, 839.0], [99.4, 1203.0], [99.5, 1222.0], [99.6, 1222.0], [99.7, 2249.0], [99.8, 2249.0], [99.9, 2354.0], [100.0, 2354.0]], "isOverall": false, "label": "Get Access token", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 725.0, "series": [{"data": [[2200.0, 1.0], [600.0, 80.0], [2500.0, 1.0], [700.0, 28.0], [800.0, 18.0], [900.0, 10.0], [1000.0, 5.0], [1100.0, 4.0], [300.0, 725.0], [1200.0, 4.0], [1300.0, 2.0], [1400.0, 1.0], [400.0, 320.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [500.0, 266.0]], "isOverall": false, "label": "Negative: Get Drafts Gmail List", "isController": false}, {"data": [[600.0, 79.0], [700.0, 35.0], [800.0, 29.0], [900.0, 7.0], [1000.0, 4.0], [1100.0, 3.0], [300.0, 297.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 2.0], [400.0, 222.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [500.0, 185.0]], "isOverall": false, "label": "Get Drafts Gmail List", "isController": false}, {"data": [[2300.0, 1.0], [2200.0, 1.0], [300.0, 34.0], [1200.0, 2.0], [700.0, 1.0], [400.0, 6.0], [200.0, 251.0], [100.0, 278.0], [800.0, 1.0], [500.0, 4.0]], "isOverall": false, "label": "Get Access token", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1468.0, "series": [{"data": [[0.0, 1092.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 353.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1468.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.341463414634147, "minX": 1.63135002E12, "maxY": 5.0, "series": [{"data": [[1.63135014E12, 5.0], [1.63135026E12, 5.0], [1.63135008E12, 5.0], [1.6313502E12, 5.0], [1.63135002E12, 4.4324324324324325], [1.63135032E12, 4.996]], "isOverall": false, "label": "Thread group: Positive", "isController": false}, {"data": [[1.63135014E12, 5.0], [1.63135026E12, 5.0], [1.63135008E12, 5.0], [1.6313502E12, 5.0], [1.63135002E12, 4.341463414634147], [1.63135032E12, 4.98804780876494]], "isOverall": false, "label": "Thread group: Negative", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63135032E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 213.0, "minX": 2.0, "maxY": 873.0, "series": [{"data": [[4.0, 466.75], [8.0, 538.0], [10.0, 449.96283551273257], [3.0, 873.0], [6.0, 419.5]], "isOverall": false, "label": "Negative: Get Drafts Gmail List", "isController": false}, {"data": [[9.957084468664842, 450.4121253405993]], "isOverall": false, "label": "Negative: Get Drafts Gmail List-Aggregated", "isController": false}, {"data": [[8.0, 463.8333333333333], [10.0, 503.559164733178], [6.0, 442.0]], "isOverall": false, "label": "Get Drafts Gmail List", "isController": false}, {"data": [[9.972445464982785, 503.0734787600462]], "isOverall": false, "label": "Get Drafts Gmail List-Aggregated", "isController": false}, {"data": [[4.0, 421.0], [2.0, 747.0], [8.0, 223.0], [10.0, 228.90782608695656], [6.0, 213.0]], "isOverall": false, "label": "Get Access token", "isController": false}, {"data": [[9.965457685664939, 230.09671848013818]], "isOverall": false, "label": "Get Access token-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 621.8166666666667, "minX": 1.63135002E12, "maxY": 12037.6, "series": [{"data": [[1.63135014E12, 10984.05], [1.63135026E12, 10847.866666666667], [1.63135008E12, 12037.6], [1.6313502E12, 10959.933333333332], [1.63135002E12, 1560.5833333333333], [1.63135032E12, 9425.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63135014E12, 4688.516666666666], [1.63135026E12, 4632.583333333333], [1.63135008E12, 4677.85], [1.6313502E12, 4672.583333333333], [1.63135002E12, 621.8166666666667], [1.63135032E12, 4001.633333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63135032E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 197.76470588235296, "minX": 1.63135002E12, "maxY": 572.863309352518, "series": [{"data": [[1.63135014E12, 415.20677966101704], [1.63135026E12, 467.9389830508474], [1.63135008E12, 517.9589041095894], [1.6313502E12, 428.87755102040825], [1.63135002E12, 480.29268292682923], [1.63135032E12, 412.9521912350595]], "isOverall": false, "label": "Negative: Get Drafts Gmail List", "isController": false}, {"data": [[1.63135014E12, 451.7346938775511], [1.63135026E12, 505.47183098591546], [1.63135008E12, 572.863309352518], [1.6313502E12, 466.5342465753426], [1.63135002E12, 524.6250000000001], [1.63135032E12, 443.15079365079384]], "isOverall": false, "label": "Get Drafts Gmail List", "isController": false}, {"data": [[1.63135014E12, 216.67586206896556], [1.63135026E12, 280.57342657342656], [1.63135008E12, 197.76470588235296], [1.6313502E12, 213.77241379310345], [1.63135002E12, 358.4], [1.63135032E12, 205.92741935483878]], "isOverall": false, "label": "Get Access token", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63135032E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 197.76470588235296, "minX": 1.63135002E12, "maxY": 569.4388489208635, "series": [{"data": [[1.63135014E12, 414.3050847457625], [1.63135026E12, 467.06779661016935], [1.63135008E12, 516.7260273972598], [1.6313502E12, 427.52721088435356], [1.63135002E12, 479.73170731707324], [1.63135032E12, 412.05577689243006]], "isOverall": false, "label": "Negative: Get Drafts Gmail List", "isController": false}, {"data": [[1.63135014E12, 450.04081632653066], [1.63135026E12, 501.96478873239454], [1.63135008E12, 569.4388489208635], [1.6313502E12, 462.66438356164383], [1.63135002E12, 523.03125], [1.63135032E12, 441.53968253968253]], "isOverall": false, "label": "Get Drafts Gmail List", "isController": false}, {"data": [[1.63135014E12, 216.4], [1.63135026E12, 280.3706293706294], [1.63135008E12, 197.76470588235296], [1.6313502E12, 213.53793103448274], [1.63135002E12, 357.6], [1.63135032E12, 205.75806451612902]], "isOverall": false, "label": "Get Access token", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63135032E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 95.35294117647058, "minX": 1.63135002E12, "maxY": 251.6, "series": [{"data": [[1.63135014E12, 101.66779661016945], [1.63135026E12, 145.49152542372877], [1.63135008E12, 151.6849315068493], [1.6313502E12, 109.28911564625855], [1.63135002E12, 142.02439024390245], [1.63135032E12, 102.17928286852587]], "isOverall": false, "label": "Negative: Get Drafts Gmail List", "isController": false}, {"data": [[1.63135014E12, 101.8571428571428], [1.63135026E12, 150.73239436619704], [1.63135008E12, 163.46402877697844], [1.6313502E12, 108.38356164383562], [1.63135002E12, 115.78125], [1.63135032E12, 99.74603174603176]], "isOverall": false, "label": "Get Drafts Gmail List", "isController": false}, {"data": [[1.63135014E12, 107.74482758620688], [1.63135026E12, 158.95104895104893], [1.63135008E12, 95.35294117647058], [1.6313502E12, 105.91034482758621], [1.63135002E12, 251.6], [1.63135032E12, 103.29032258064515]], "isOverall": false, "label": "Get Access token", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63135032E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 164.0, "minX": 1.63135002E12, "maxY": 2354.0, "series": [{"data": [[1.63135014E12, 1203.0], [1.63135026E12, 2354.0], [1.63135008E12, 1638.0], [1.6313502E12, 957.0], [1.63135002E12, 955.0], [1.63135032E12, 857.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63135014E12, 540.0], [1.63135026E12, 587.8000000000001], [1.63135008E12, 818.2000000000003], [1.6313502E12, 561.0], [1.63135002E12, 731.0], [1.63135032E12, 545.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63135014E12, 943.6899999999982], [1.63135026E12, 1956.5999999999954], [1.63135008E12, 1441.520000000001], [1.6313502E12, 884.7599999999996], [1.63135002E12, 955.0], [1.63135032E12, 651.9700000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63135014E12, 582.5499999999995], [1.63135026E12, 708.0999999999999], [1.63135008E12, 902.4], [1.6313502E12, 648.7999999999998], [1.63135002E12, 785.8000000000003], [1.63135032E12, 582.45]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63135014E12, 165.0], [1.63135026E12, 173.0], [1.63135008E12, 179.0], [1.6313502E12, 164.0], [1.63135002E12, 188.0], [1.63135032E12, 164.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63135014E12, 338.0], [1.63135026E12, 361.0], [1.63135008E12, 523.0], [1.6313502E12, 341.0], [1.63135002E12, 484.0], [1.63135032E12, 338.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63135032E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 262.5, "minX": 2.0, "maxY": 1388.0, "series": [{"data": [[2.0, 747.0], [8.0, 366.0], [9.0, 358.0], [10.0, 366.5], [11.0, 362.0], [12.0, 376.5], [3.0, 262.5], [13.0, 378.5], [14.0, 665.5], [15.0, 579.0], [16.0, 573.0], [5.0, 1388.0], [6.0, 421.0], [7.0, 405.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 573.0], [8.0, 390.0], [9.0, 383.0], [10.0, 400.0], [11.0, 399.0], [12.0, 406.5], [3.0, 522.0], [13.0, 441.0], [14.0, 610.5], [15.0, 793.0], [16.0, 976.0], [5.0, 476.5], [6.0, 432.0], [7.0, 422.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 261.5, "minX": 2.0, "maxY": 1388.0, "series": [{"data": [[2.0, 745.0], [8.0, 365.0], [9.0, 354.0], [10.0, 365.0], [11.0, 360.0], [12.0, 374.0], [3.0, 261.5], [13.0, 377.5], [14.0, 660.5], [15.0, 579.0], [16.0, 564.0], [5.0, 1388.0], [6.0, 421.0], [7.0, 404.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 573.0], [8.0, 390.0], [9.0, 380.5], [10.0, 399.0], [11.0, 398.5], [12.0, 405.5], [3.0, 522.0], [13.0, 441.0], [14.0, 610.0], [15.0, 793.0], [16.0, 974.5], [5.0, 475.5], [6.0, 431.0], [7.0, 422.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.63135002E12, "maxY": 9.783333333333333, "series": [{"data": [[1.63135014E12, 9.75], [1.63135026E12, 9.716666666666667], [1.63135008E12, 9.766666666666667], [1.6313502E12, 9.783333333333333], [1.63135002E12, 1.3666666666666667], [1.63135032E12, 8.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63135032E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.63135002E12, "maxY": 4.916666666666667, "series": [{"data": [[1.63135014E12, 4.866666666666666], [1.63135026E12, 4.75], [1.63135008E12, 4.916666666666667], [1.6313502E12, 4.85], [1.63135002E12, 0.6166666666666667], [1.63135032E12, 4.166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63135014E12, 4.916666666666667], [1.63135026E12, 4.916666666666667], [1.63135008E12, 4.866666666666666], [1.6313502E12, 4.9], [1.63135002E12, 0.6833333333333333], [1.63135032E12, 4.183333333333334]], "isOverall": false, "label": "401", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63135032E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63135002E12, "maxY": 4.916666666666667, "series": [{"data": [[1.63135014E12, 4.916666666666667], [1.63135026E12, 4.916666666666667], [1.63135008E12, 4.866666666666666], [1.6313502E12, 4.9], [1.63135002E12, 0.6833333333333333], [1.63135032E12, 4.183333333333334]], "isOverall": false, "label": "Negative: Get Drafts Gmail List-failure", "isController": false}, {"data": [[1.63135014E12, 2.4166666666666665], [1.63135026E12, 2.3833333333333333], [1.63135008E12, 0.2833333333333333], [1.6313502E12, 2.4166666666666665], [1.63135002E12, 0.08333333333333333], [1.63135032E12, 2.066666666666667]], "isOverall": false, "label": "Get Access token-success", "isController": false}, {"data": [[1.63135014E12, 2.45], [1.63135026E12, 2.3666666666666667], [1.63135008E12, 4.633333333333334], [1.6313502E12, 2.433333333333333], [1.63135002E12, 0.5333333333333333], [1.63135032E12, 2.1]], "isOverall": false, "label": "Get Drafts Gmail List-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63135032E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.63135002E12, "maxY": 4.916666666666667, "series": [{"data": [[1.63135014E12, 4.866666666666666], [1.63135026E12, 4.75], [1.63135008E12, 4.916666666666667], [1.6313502E12, 4.85], [1.63135002E12, 0.6166666666666667], [1.63135032E12, 4.166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63135014E12, 4.916666666666667], [1.63135026E12, 4.916666666666667], [1.63135008E12, 4.866666666666666], [1.6313502E12, 4.9], [1.63135002E12, 0.6833333333333333], [1.63135032E12, 4.183333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63135032E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

